name: CI

# Trigger on pull_request or on push to master
on:
  create:
    tags:
  push:
    branches:
      - master
  pull_request:

jobs:

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install tools
      run: |
        sudo pip3 install flake8==3.7.8
        sudo apt-get install clang-format clang-tidy
        echo "::add-path::/usr/lib/llvm-8/bin"
    - name: flake8
      run: flake8
    - run: ./scripts/clang-format-diff.sh
    - run: ./scripts/clang-tidy-diff.sh

  build-gcc:
    name: gcc
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install ninja
      run: sudo apt-get install ninja-build
    - name: cmake
      run: |
        mkdir -p out
        cmake -S . -B out -G Ninja -DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7
    - name: build
      run: cmake --build out
    - name: archive
      id: archive
      run: |
        export VERSION=1.0 #$GITHUB_SHA
        export PKGNAME="binaryen-$VERSION-linux"
        export TARBALL=$PKGNAME.tar.gz
        mv out/bin binaryen-$VERSION
        tar -czf $TARBALL binaryen-$VERSION
        shasum -a 256 $TARBALL > $PKGNAME.tar.gz.sha256
        echo "::set-output name=assert_name::$TARBALL"
    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true
    - name: upload release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.archive.outputs.asset_name }}
        asset_name: ${{ steps.archive.outputs.asset_name }}
        asset_content_type: application/gzip
